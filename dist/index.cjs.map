{"version":3,"sources":["../src/definitions.ts","../src/providers/apple.provider.ts","../src/providers/facebook.provider.ts","../src/providers/google.provider.ts","../src/providers/phone.provider.ts","../src/providers/twitter.provider.ts","../src/web.ts","../src/index.ts","../src/facades.ts","../src/operators.ts"],"sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/auth';\n\nexport interface SignInResult {}\n\nexport interface CapacitorFirebaseAuthPlugin {\n  signIn<T extends SignInResult>(options: {\n    providerId: string;\n    data?: SignInOptions;\n  }): Promise<T>;\n  link<T extends SignInResult>(options: {\n    providerId: string;\n    data?: SignInOptions;\n  }): Promise<T>;\n  signOut(options: {}): Promise<void>;\n}\n\nexport class GoogleSignInResult implements SignInResult {\n  providerId = firebase.auth.GoogleAuthProvider.PROVIDER_ID;\n  constructor(public idToken: string) {}\n}\n\nexport class TwitterSignInResult implements SignInResult {\n  providerId = firebase.auth.TwitterAuthProvider.PROVIDER_ID;\n  constructor(public idToken: string, public secret: string) {}\n}\n\nexport class FacebookSignInResult implements SignInResult {\n  providerId = firebase.auth.FacebookAuthProvider.PROVIDER_ID;\n  constructor(public idToken: string) {}\n}\n\nexport class AppleSignInResult implements SignInResult {\n  providerId = firebase.auth.FacebookAuthProvider.PROVIDER_ID;\n  constructor(\n    public idToken: string,\n    public rawNonce: string,\n    public accessToken: string,\n    public secret: string\n  ) {}\n}\n\nexport class PhoneSignInResult implements SignInResult {\n  providerId = firebase.auth.PhoneAuthProvider.PROVIDER_ID;\n  constructor(public verificationId: string, public verificationCode: string) {}\n}\n\nexport interface PhoneSignInOptions {\n  container?: HTMLElement;\n  phone: string;\n  verificationCode?: string;\n}\n\nexport type SignInOptions = PhoneSignInOptions;\n","import firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport { AppleSignInResult, SignInOptions } from '../definitions';\n\nexport const appleSignInWeb: (options: {\n  providerId: string;\n  data?: SignInOptions;\n}) => Promise<AppleSignInResult> = async () => {\n  const provider = new firebase.auth.OAuthProvider('apple.com');\n  firebase.auth().useDeviceLanguage();\n  const userCredential = await firebase.auth().signInWithPopup(provider);\n  const credential =\n    userCredential?.credential as firebase.auth.OAuthCredential;\n  return new AppleSignInResult(\n    credential.idToken as string,\n    '',\n    credential.accessToken as string,\n    credential.secret ?? ''\n  );\n};\n\nexport const appleLinkWeb: (options: {\n  providerId: string;\n  data?: SignInOptions;\n}) => Promise<firebase.auth.UserCredential> = async () => {\n  const provider = new firebase.auth.FacebookAuthProvider();\n  firebase.auth().useDeviceLanguage();\n\n  if (!firebase.auth().currentUser) {\n    throw new Error('No user to link to');\n  }\n  return await firebase.auth().currentUser.linkWithPopup(provider);\n};\n","import firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport { FacebookSignInResult, SignInOptions } from '../definitions';\n\nexport const facebookSignInWeb: (options: {\n  providerId: string;\n  data?: SignInOptions;\n}) => Promise<FacebookSignInResult> = async () => {\n  const provider = new firebase.auth.FacebookAuthProvider();\n  firebase.auth().useDeviceLanguage();\n  const userCredential = await firebase.auth().signInWithPopup(provider);\n  const credential =\n    userCredential?.credential as firebase.auth.OAuthCredential;\n  return new FacebookSignInResult(credential?.accessToken as string);\n};\n\nexport const facebookLinkWeb: (options: {\n  providerId: string;\n  data?: SignInOptions;\n}) => Promise<firebase.auth.UserCredential> = async () => {\n  const provider = new firebase.auth.FacebookAuthProvider();\n  firebase.auth().useDeviceLanguage();\n\n  if (!firebase.auth().currentUser) {\n    throw new Error('No user to link to');\n  }\n  return await firebase.auth().currentUser.linkWithPopup(provider);\n};\n","import firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport { GoogleSignInResult, SignInOptions } from '../definitions';\n\nexport const googleSignInWeb: (options: {\n  providerId: string;\n  data?: SignInOptions;\n}) => Promise<GoogleSignInResult> = async () => {\n  const provider = new firebase.auth.GoogleAuthProvider();\n  firebase.auth().useDeviceLanguage();\n  const userCredential = await firebase.auth().signInWithPopup(provider);\n  const credential =\n    userCredential?.credential as firebase.auth.OAuthCredential;\n  return new GoogleSignInResult(credential.idToken as string);\n};\n\nexport const googleLinkWeb: (options: {\n  providerId: string;\n  data?: SignInOptions;\n}) => Promise<firebase.auth.UserCredential> = async () => {\n  const provider = new firebase.auth.GoogleAuthProvider();\n  firebase.auth().useDeviceLanguage();\n\n  if (!firebase.auth().currentUser) {\n    throw new Error('No user to link to');\n  }\n  return await firebase.auth().currentUser.linkWithPopup(provider);\n};\n","import firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport { PhoneSignInResult, SignInOptions } from '../definitions';\n\nexport const phoneSignInWeb: (options: {\n  providerId: string;\n  data?: SignInOptions;\n}) => Promise<PhoneSignInResult> = async (options) => {\n  firebase.auth().useDeviceLanguage();\n  const code = options.data?.verificationCode as string;\n  const verifier = new firebase.auth.RecaptchaVerifier(options.data?.container);\n  const userCredential = await firebase\n    .auth()\n    .signInWithPhoneNumber(options.data?.phone as string, verifier);\n  const confirmation = await userCredential.confirm(code);\n  const idToken = await confirmation.user?.getIdToken();\n  return new PhoneSignInResult(idToken as string, code);\n};\n\nexport const phoneLinkWeb: (options: {\n  providerId: string;\n  data?: SignInOptions;\n}) => Promise<firebase.auth.UserCredential> = async () => {\n  // const provider = new firebase.auth.PhoneAuthProvider();\n  return Promise.reject(`The phone provider was not implemented for web yet`);\n};\n","import firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport { SignInOptions, TwitterSignInResult } from '../definitions';\n\nimport OAuthCredential = firebase.auth.OAuthCredential;\n\nexport const twitterSignInWeb: (options: {\n  providerId: string;\n  data?: SignInOptions;\n}) => Promise<TwitterSignInResult> = async () => {\n  const provider = new firebase.auth.TwitterAuthProvider();\n  firebase.auth().useDeviceLanguage();\n  const userCredential = await firebase.auth().signInWithPopup(provider);\n  const credential = userCredential?.credential as OAuthCredential;\n  return new TwitterSignInResult(\n    credential.accessToken as string,\n    credential.secret as string\n  );\n};\n\nexport const twitterLinkWeb: (options: {\n  providerId: string;\n  data?: SignInOptions;\n}) => Promise<firebase.auth.UserCredential> = async () => {\n  const provider = new firebase.auth.TwitterAuthProvider();\n  firebase.auth().useDeviceLanguage();\n\n  if (!firebase.auth().currentUser) {\n    throw new Error('No user to link to');\n  }\n  return await firebase.auth().currentUser.linkWithPopup(provider);\n};\n","import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport { WebPlugin } from '@capacitor/core';\n\nimport {\n  CapacitorFirebaseAuthPlugin,\n  SignInOptions,\n  SignInResult,\n} from './definitions';\nimport { appleSignInWeb, appleLinkWeb } from './providers/apple.provider';\nimport {\n  facebookSignInWeb,\n  facebookLinkWeb,\n} from './providers/facebook.provider';\nimport { googleSignInWeb, googleLinkWeb } from './providers/google.provider';\nimport { phoneSignInWeb, phoneLinkWeb } from './providers/phone.provider';\nimport { twitterSignInWeb, twitterLinkWeb } from './providers/twitter.provider';\n\nconst appleProviderId = 'apple.com';\n\nexport class CapacitorFirebaseAuthWeb\n  extends WebPlugin\n  implements CapacitorFirebaseAuthPlugin\n{\n  constructor() {\n    super();\n  }\n\n  async signIn<T extends SignInResult>(options: {\n    providerId: string;\n    data?: SignInOptions;\n  }): Promise<T> {\n    switch (options.providerId) {\n      case appleProviderId:\n        return appleSignInWeb(options) as any;\n      case firebase.auth.GoogleAuthProvider.PROVIDER_ID:\n        return googleSignInWeb(options) as any;\n      case firebase.auth.TwitterAuthProvider.PROVIDER_ID:\n        return twitterSignInWeb(options) as any;\n      case firebase.auth.FacebookAuthProvider.PROVIDER_ID:\n        return facebookSignInWeb(options) as any;\n      case firebase.auth.PhoneAuthProvider.PROVIDER_ID:\n        return phoneSignInWeb(options) as any;\n    }\n\n    return Promise.reject(\n      `The '${options.providerId}' provider was not supported`\n    );\n  }\n\n  async link<T extends SignInResult>(options: {\n    providerId: string;\n    data?: SignInOptions;\n  }): Promise<T> {\n    switch (options.providerId) {\n      case appleProviderId:\n        return appleLinkWeb(options) as any;\n      case firebase.auth.GoogleAuthProvider.PROVIDER_ID:\n        return googleLinkWeb(options) as any;\n      case firebase.auth.TwitterAuthProvider.PROVIDER_ID:\n        return twitterLinkWeb(options) as any;\n      case firebase.auth.FacebookAuthProvider.PROVIDER_ID:\n        return facebookLinkWeb(options) as any;\n      case firebase.auth.PhoneAuthProvider.PROVIDER_ID:\n        return phoneLinkWeb(options) as any;\n    }\n\n    return Promise.reject(\n      `The '${options.providerId}' provider was not supported`\n    );\n  }\n\n  async signOut(_options: {}): Promise<void> {\n    return firebase.auth().signOut();\n  }\n}\n","export * from './definitions';\nexport * from './facades';\nexport * from './operators';\n","import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport { registerPlugin, Capacitor } from '@capacitor/core';\nimport { Observable, throwError } from 'rxjs';\n\nimport {\n  AppleSignInResult,\n  CapacitorFirebaseAuthPlugin,\n  FacebookSignInResult,\n  GoogleSignInResult,\n  PhoneSignInResult,\n  TwitterSignInResult,\n  SignInResult,\n  SignInOptions,\n} from './definitions';\n\nexport const CapacitorFirebaseAuth =\n  registerPlugin<CapacitorFirebaseAuthPlugin>('CapacitorFirebaseAuth', {\n    web: () => import('./web').then((m) => new m.CapacitorFirebaseAuthWeb()),\n  });\nconst plugin = CapacitorFirebaseAuth;\n\nexport const cfaLink = (\n  providerId: string,\n  data?: SignInOptions\n): Observable<{\n  userCredential: firebase.auth.UserCredential;\n  result?: SignInResult;\n}> => {\n  switch (providerId) {\n    case firebase.auth.GoogleAuthProvider.PROVIDER_ID:\n      return cfaLinkGoogle();\n    case firebase.auth.TwitterAuthProvider.PROVIDER_ID:\n      return cfaLinkTwitter();\n    case firebase.auth.FacebookAuthProvider.PROVIDER_ID:\n      return cfaLinkFacebook();\n    case cfaSignInAppleProvider:\n      return cfaLinkApple();\n    case firebase.auth.PhoneAuthProvider.PROVIDER_ID:\n      if (!data) {\n        return throwError(\n          new Error('Phone and Verification data must be provided.')\n        );\n      }\n      return cfaLinkPhone(data.phone, data.verificationCode);\n    default:\n      return throwError(\n        new Error(`The '${providerId}' provider was not supported`)\n      );\n  }\n};\n\n/**\n * Call the Google link method on native layer and links user on web layer with retrieved credentials.\n */\nexport const cfaLinkGoogle = (): Observable<{\n  userCredential: firebase.auth.UserCredential;\n  result?: GoogleSignInResult;\n}> => {\n  return new Observable((observer) => {\n    // get the provider id\n    const providerId = firebase.auth.GoogleAuthProvider.PROVIDER_ID;\n\n    // Special handling on the web as we cannot link the auth provider twice\n    if (Capacitor.getPlatform() === 'web') {\n      plugin\n        .link<firebase.auth.UserCredential>({ providerId })\n        .then((userCredential) => {\n          observer.next({ userCredential });\n          observer.complete();\n        })\n        .catch((reject) => {\n          observer.error(reject);\n        });\n      return;\n    }\n\n    // native link\n    plugin\n      .link<GoogleSignInResult>({ providerId })\n      .then((result) => {\n        // create the credentials\n        const credential = firebase.auth.GoogleAuthProvider.credential(\n          result.idToken\n        );\n\n        // web link\n        const authUser = firebase.app().auth().currentUser;\n        if (!authUser) {\n          return observer.error(new Error('No user to link to'));\n        }\n\n        authUser\n          .linkWithCredential(credential)\n          .then((userCredential) => {\n            observer.next({ userCredential, result });\n            observer.complete();\n          })\n          .catch((reject: any) => {\n            observer.error(reject);\n          });\n      })\n      .catch((reject) => {\n        observer.error(reject);\n      });\n  });\n};\n\n/**\n * Call the Twitter link method on native and link on web layer with retrieved credentials.\n */\nexport const cfaLinkTwitter = (): Observable<{\n  userCredential: firebase.auth.UserCredential;\n  result?: TwitterSignInResult;\n}> => {\n  return new Observable((observer) => {\n    // get the provider id\n    const providerId = firebase.auth.TwitterAuthProvider.PROVIDER_ID;\n\n    // Special handling on the web as we cannot link the auth provider twice\n    if (Capacitor.getPlatform() === 'web') {\n      plugin\n        .link<firebase.auth.UserCredential>({ providerId })\n        .then((userCredential) => {\n          observer.next({ userCredential });\n          observer.complete();\n        })\n        .catch((reject) => {\n          observer.error(reject);\n        });\n      return;\n    }\n\n    // native link\n    plugin\n      .link<TwitterSignInResult>({ providerId })\n      .then((result) => {\n        // create the credentials\n        const credential = firebase.auth.TwitterAuthProvider.credential(\n          result.idToken,\n          result.secret\n        );\n\n        // web link\n        const authUser = firebase.app().auth().currentUser;\n        if (!authUser) {\n          return observer.error(new Error('No user to link to'));\n        }\n\n        authUser\n          .linkWithCredential(credential)\n          .then((userCredential) => {\n            observer.next({ userCredential, result });\n            observer.complete();\n          })\n          .catch((reject: any) => observer.error(reject));\n      })\n      .catch((reject) => observer.error(reject));\n  });\n};\n\n/**\n * Call the Facebook link method on native and link on web layer with retrieved credentials.\n */\nexport const cfaLinkFacebook = (): Observable<{\n  userCredential: firebase.auth.UserCredential;\n  result?: FacebookSignInResult;\n}> => {\n  return new Observable((observer) => {\n    // get the provider id\n    const providerId = firebase.auth.FacebookAuthProvider.PROVIDER_ID;\n\n    // Special handling on the web as we cannot link the auth provider twice\n    if (Capacitor.getPlatform() === 'web') {\n      plugin\n        .link<firebase.auth.UserCredential>({ providerId })\n        .then((userCredential) => {\n          observer.next({ userCredential });\n          observer.complete();\n        })\n        .catch((reject) => {\n          observer.error(reject);\n        });\n      return;\n    }\n\n    // native link\n    plugin\n      .link<FacebookSignInResult>({ providerId })\n      .then((result) => {\n        // create the credentials\n        const credential = firebase.auth.FacebookAuthProvider.credential(\n          result.idToken\n        );\n\n        // web link\n        const authUser = firebase.app().auth().currentUser;\n        if (!authUser) {\n          return observer.error(new Error('No user to link to'));\n        }\n\n        authUser\n          .linkWithCredential(credential)\n          .then((userCredential) => {\n            observer.next({ userCredential, result });\n            observer.complete();\n          })\n          .catch((reject: any) => observer.error(reject));\n      })\n      .catch((reject) => observer.error(reject));\n  });\n};\n\n/**\n * Call the Apple link method on native and link on web layer with retrieved credentials.\n */\nexport const cfaLinkApple = (): Observable<{\n  userCredential: firebase.auth.UserCredential;\n  result?: AppleSignInResult;\n}> => {\n  return new Observable((observer) => {\n    // Special handling on the web as we cannot link the auth provider twice\n    if (Capacitor.getPlatform() === 'web') {\n      plugin\n        .link<firebase.auth.UserCredential>({\n          providerId: cfaSignInAppleProvider,\n        })\n        .then((userCredential) => {\n          observer.next({ userCredential });\n          observer.complete();\n        })\n        .catch((reject) => {\n          observer.error(reject);\n        });\n      return;\n    }\n\n    // native link\n    plugin\n      .link<AppleSignInResult>({ providerId: cfaSignInAppleProvider })\n      .then((result) => {\n        const { idToken, rawNonce } = result;\n\n        const provider = new firebase.auth.OAuthProvider('apple.com');\n        provider.addScope('email');\n        provider.addScope('name');\n\n        const credential = provider.credential({ idToken, rawNonce });\n\n        // web link\n        const authUser = firebase.app().auth().currentUser;\n        if (!authUser) {\n          return observer.error(new Error('No user to link to'));\n        }\n\n        authUser\n          .linkWithCredential(credential)\n          .then((userCredential) => {\n            observer.next({ userCredential, result });\n            observer.complete();\n          })\n          .catch((reject: any) => observer.error(reject));\n      })\n      .catch((reject) => observer.error(reject));\n  });\n};\n\n/**\n * Call the Phone verification link, handling send and retrieve to code on native, but only link on web with retrieved credentials.\n * @param phone The user phone number.\n * @param verificationCode The verification code sent by SMS (optional).\n */\nexport const cfaLinkPhone = (\n  phone: string,\n  verificationCode?: string\n): Observable<{\n  userCredential: firebase.auth.UserCredential;\n  result?: PhoneSignInResult;\n}> => {\n  return new Observable((observer) => {\n    // get the provider id\n    const providerId = firebase.auth.PhoneAuthProvider.PROVIDER_ID;\n\n    // Special handling on the web as we cannot link the auth provider twice\n    if (Capacitor.getPlatform() === 'web') {\n      plugin\n        .link<firebase.auth.UserCredential>({ providerId })\n        .then((userCredential) => {\n          observer.next({ userCredential });\n          observer.complete();\n        })\n        .catch((reject) => {\n          observer.error(reject);\n        });\n      return;\n    }\n\n    plugin\n      .link<PhoneSignInResult>({\n        providerId,\n        data: { phone, verificationCode },\n      })\n      .then((result) => {\n        // if there is no verification code\n        if (!result.verificationCode) {\n          return observer.complete();\n        }\n\n        // create the credentials\n        const credential = firebase.auth.PhoneAuthProvider.credential(\n          result.verificationId,\n          result.verificationCode\n        );\n\n        // web link\n        const authUser = firebase.app().auth().currentUser;\n        if (!authUser) {\n          return observer.error(new Error('No user to link to'));\n        }\n\n        authUser\n          .linkWithCredential(credential)\n          .then((userCredential) => {\n            observer.next({ userCredential, result });\n            observer.complete();\n          })\n          .catch((reject: any) => observer.error(reject));\n      })\n      .catch((reject) => observer.error(reject));\n  });\n};\n\n/**\n * Call the sign in method on native layer and sign in on web layer with retrieved credentials.\n * @param providerId The provider identification.\n * @param data The provider additional information (optional).\n */\nexport const cfaSignIn = (\n  providerId: string,\n  data?: SignInOptions\n): Observable<{\n  userCredential: firebase.auth.UserCredential;\n  result: SignInResult;\n}> => {\n  switch (providerId) {\n    case firebase.auth.GoogleAuthProvider.PROVIDER_ID:\n      return cfaSignInGoogle();\n    case firebase.auth.TwitterAuthProvider.PROVIDER_ID:\n      return cfaSignInTwitter();\n    case firebase.auth.FacebookAuthProvider.PROVIDER_ID:\n      return cfaSignInFacebook();\n    case cfaSignInAppleProvider:\n      return cfaSignInApple();\n    case firebase.auth.PhoneAuthProvider.PROVIDER_ID:\n      if (!data) {\n        return throwError(\n          new Error('Phone and Verification data must be provided.')\n        );\n      }\n      return cfaSignInPhone(data.phone, data.verificationCode);\n    default:\n      return throwError(\n        new Error(`The '${providerId}' provider was not supported`)\n      );\n  }\n};\n\n/**\n * Call the Google sign in method on native layer and sign in on web layer with retrieved credentials.\n */\nexport const cfaSignInGoogle = (): Observable<{\n  userCredential: firebase.auth.UserCredential;\n  result: GoogleSignInResult;\n}> => {\n  return new Observable((observer) => {\n    // get the provider id\n    const providerId = firebase.auth.GoogleAuthProvider.PROVIDER_ID;\n\n    // native sign in\n    plugin\n      .signIn<GoogleSignInResult>({ providerId })\n      .then((result: GoogleSignInResult) => {\n        // create the credentials\n        const credential = firebase.auth.GoogleAuthProvider.credential(\n          result.idToken\n        );\n\n        // web sign in\n        firebase\n          .app()\n          .auth()\n          .signInWithCredential(credential)\n          .then((userCredential) => {\n            observer.next({ userCredential, result });\n            observer.complete();\n          })\n          .catch((reject: any) => {\n            observer.error(reject);\n          });\n      })\n      .catch((reject: any) => {\n        observer.error(reject);\n      });\n  });\n};\n\n/**\n * Call the Twitter sign in method on native and sign in on web layer with retrieved credentials.\n */\nexport const cfaSignInTwitter = (): Observable<{\n  userCredential: firebase.auth.UserCredential;\n  result: TwitterSignInResult;\n}> => {\n  return new Observable((observer) => {\n    // get the provider id\n    const providerId = firebase.auth.TwitterAuthProvider.PROVIDER_ID;\n\n    // native sign in\n    plugin\n      .signIn<TwitterSignInResult>({ providerId })\n      .then((result) => {\n        // create the credentials\n        const credential = firebase.auth.TwitterAuthProvider.credential(\n          result.idToken,\n          result.secret\n        );\n\n        // web sign in\n        firebase\n          .app()\n          .auth()\n          .signInWithCredential(credential)\n          .then((userCredential) => {\n            observer.next({ userCredential, result });\n            observer.complete();\n          })\n          .catch((reject: any) => observer.error(reject));\n      })\n      .catch((reject: any) => observer.error(reject));\n  });\n};\n\n/**\n * Call the Facebook sign in method on native and sign in on web layer with retrieved credentials.\n */\nexport const cfaSignInFacebook = (): Observable<{\n  userCredential: firebase.auth.UserCredential;\n  result: FacebookSignInResult;\n}> => {\n  return new Observable((observer) => {\n    // get the provider id\n    const providerId = firebase.auth.FacebookAuthProvider.PROVIDER_ID;\n\n    // native sign in\n    plugin\n      .signIn<FacebookSignInResult>({ providerId })\n      .then((result) => {\n        // create the credentials\n        const credential = firebase.auth.FacebookAuthProvider.credential(\n          result.idToken\n        );\n\n        // TODO: add scopes here?\n        // const provider = new firebase.auth.OAuthProvider('facebook.com');\n        // provider.addScope('email');\n        // const credential = provider.credential({  idToken: result.idToken });\n\n        // web sign in\n        firebase\n          .app()\n          .auth()\n          .signInWithCredential(credential)\n          .then((userCredential) => {\n            observer.next({ userCredential, result });\n            observer.complete();\n          })\n          .catch((reject: any) => observer.error(reject));\n      })\n      .catch((reject: any) => observer.error(reject));\n  });\n};\n\nexport const cfaSignInAppleProvider = 'apple.com';\n\n/**\n * Call the Apple sign in method on native and sign in on web layer with retrieved credentials.\n */\nexport const cfaSignInApple = (): Observable<{\n  userCredential: firebase.auth.UserCredential;\n  result: AppleSignInResult;\n}> => {\n  return new Observable((observer) => {\n    // native sign in\n    plugin\n      .signIn<AppleSignInResult>({ providerId: cfaSignInAppleProvider })\n      .then((result) => {\n        const { idToken, rawNonce } = result;\n\n        const provider = new firebase.auth.OAuthProvider('apple.com');\n        provider.addScope('email');\n        provider.addScope('name');\n\n        const credential = provider.credential({ idToken, rawNonce });\n\n        // web sign in\n        firebase\n          .app()\n          .auth()\n          .signInWithCredential(credential)\n          .then((userCredential) => {\n            observer.next({ userCredential, result });\n            observer.complete();\n          })\n          .catch((reject: any) => observer.error(reject));\n      })\n      .catch((reject: any) => observer.error(reject));\n  });\n};\n\n/**\n * Call the Phone verification sign in, handling send and retrieve to code on native, but only sign in on web with retrieved credentials.\n * @param phone The user phone number.\n * @param verificationCode The verification code sent by SMS (optional).\n */\nexport const cfaSignInPhone = (\n  phone: string,\n  verificationCode?: string\n): Observable<{\n  userCredential: firebase.auth.UserCredential;\n  result: PhoneSignInResult;\n}> => {\n  return new Observable((observer) => {\n    // get the provider id\n    const providerId = firebase.auth.PhoneAuthProvider.PROVIDER_ID;\n\n    plugin\n      .signIn<PhoneSignInResult>({\n        providerId,\n        data: { phone, verificationCode },\n      })\n      .then((result) => {\n        // if there is no verification code\n        if (!result.verificationCode) {\n          return observer.complete();\n        }\n\n        // create the credentials\n        const credential = firebase.auth.PhoneAuthProvider.credential(\n          result.verificationId,\n          result.verificationCode\n        );\n\n        // web sign in\n        firebase\n          .app()\n          .auth()\n          .signInWithCredential(credential)\n          .then((userCredential) => {\n            observer.next({ userCredential, result });\n            observer.complete();\n          })\n          .catch((reject: any) => observer.error(reject));\n      })\n      .catch((reject: any) => observer.error(reject));\n  });\n};\n\n/**\n * Observable of one notification of <code>On Code Sent</code>event from Phone Verification process.\n */\nexport const cfaSignInPhoneOnCodeSent = (): Observable<string> => {\n  return new Observable<string>((observer) => {\n    // @ts-ignore\n    return plugin.addListener(\n      'cfaSignInPhoneOnCodeSent',\n      (event: { verificationId: string }) => {\n        observer.next(event.verificationId);\n        observer.complete();\n      }\n    );\n  });\n};\n\n/**\n * Observable of one notification of <code>On Code Received</code> event from Phone Verification process.\n */\nexport const cfaSignInPhoneOnCodeReceived = (): Observable<{\n  verificationId: string;\n  verificationCode: string;\n}> => {\n  return new Observable<{ verificationId: string; verificationCode: string }>(\n    (observer) => {\n      // @ts-ignore\n      return plugin.addListener(\n        'cfaSignInPhoneOnCodeReceived',\n        (event: { verificationId: string; verificationCode: string }) => {\n          observer.next(event);\n          observer.complete();\n        }\n      );\n    }\n  );\n};\n\n/**\n * Call Google sign out method on native and web layers.\n */\nexport const cfaSignOut = (): Observable<void> => {\n  return new Observable((observer) => {\n    plugin.signOut({}).then(() => {\n      // web sign out\n      firebase\n        .app()\n        .auth()\n        .signOut()\n        .then(() => {\n          observer.next();\n          observer.complete();\n        })\n        .catch((reject: any) => observer.error(reject));\n    });\n  });\n};\n","import firebase from 'firebase/app';\nimport { Observable, pipe, UnaryFunction } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * Operator to map firebase.User to firebase.UserInfo.\n *\n * Sample of use:\n *\n * ```ts\n * import {cfaSignIn, mapUserToUserInfo} from 'capacitor-firebase-auth';\n * import {UserInfo} from 'firebase/app';\n *\n * cfaSignIn('google.com').pipe(\n *     mapUserToUserInfo(),\n * ).subscribe(\n *     (user: UserInfo) => console.log(user.displayName);\n * )\n * ```\n */\nexport const mapUserToUserInfo = (): UnaryFunction<\n  Observable<firebase.User>,\n  Observable<firebase.UserInfo>\n> =>\n  pipe(\n    map((user: firebase.User) => {\n      if (user) {\n        const { uid, providerId, displayName, photoURL, phoneNumber, email } =\n          user;\n        return { uid, providerId, displayName, photoURL, phoneNumber, email };\n      }\n      return user;\n    })\n  );\n\n/**\n * Operator to map firebase.auth.UserCredential to firebase.UserInfo.\n *\n * For use with alternative facade only.\n *\n * Sample of use:\n *\n * ```ts\n * import {cfaSignIn, mapUserToUserInfo} from 'capacitor-firebase-auth/alternative';\n * import {UserInfo} from 'firebase/app';\n *\n * cfaSignIn('google.com').pipe(\n *     mapUserToUserInfo(),\n * ).subscribe(\n *     (user: UserInfo) => console.log(user.displayName);\n * )\n * ```\n */\nexport const mapUserCredentialToUserInfo = (): UnaryFunction<\n  Observable<{ userCredential: firebase.auth.UserCredential }>,\n  Observable<firebase.UserInfo | null>\n> =>\n  pipe(\n    map(\n      ({\n        userCredential,\n      }: {\n        userCredential: firebase.auth.UserCredential;\n      }) => {\n        if (userCredential?.user) {\n          const { uid, providerId, displayName, photoURL, phoneNumber, email } =\n            userCredential.user;\n          return { uid, providerId, displayName, photoURL, phoneNumber, email };\n        }\n        return null;\n      }\n    )\n  );\n"],"mappings":"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","names":["import_app","import_auth","GoogleSignInResult","TwitterSignInResult","FacebookSignInResult","AppleSignInResult","PhoneSignInResult","init_definitions","__esmMin","idToken","firebase","secret","rawNonce","accessToken","verificationId","verificationCode","import_app","import_auth","appleSignInWeb","appleLinkWeb","init_apple_provider","__esmMin","init_definitions","provider","firebase","credential","AppleSignInResult","import_app","import_auth","facebookSignInWeb","facebookLinkWeb","init_facebook_provider","__esmMin","init_definitions","provider","firebase","credential","FacebookSignInResult","import_app","import_auth","googleSignInWeb","googleLinkWeb","init_google_provider","__esmMin","init_definitions","provider","firebase","credential","GoogleSignInResult","import_app","import_auth","phoneSignInWeb","phoneLinkWeb","init_phone_provider","__esmMin","init_definitions","options","firebase","code","verifier","idToken","PhoneSignInResult","import_app","import_auth","twitterSignInWeb","twitterLinkWeb","init_twitter_provider","__esmMin","init_definitions","provider","firebase","credential","TwitterSignInResult","web_exports","__export","CapacitorFirebaseAuthWeb","import_app","import_auth","import_core","appleProviderId","init_web","__esmMin","init_apple_provider","init_facebook_provider","init_google_provider","init_phone_provider","init_twitter_provider","options","appleSignInWeb","firebase","googleSignInWeb","twitterSignInWeb","facebookSignInWeb","phoneSignInWeb","appleLinkWeb","googleLinkWeb","twitterLinkWeb","facebookLinkWeb","phoneLinkWeb","_options","src_exports","__export","AppleSignInResult","CapacitorFirebaseAuth","FacebookSignInResult","GoogleSignInResult","PhoneSignInResult","TwitterSignInResult","cfaLink","cfaLinkApple","cfaLinkFacebook","cfaLinkGoogle","cfaLinkPhone","cfaLinkTwitter","cfaSignIn","cfaSignInApple","cfaSignInAppleProvider","cfaSignInFacebook","cfaSignInGoogle","cfaSignInPhone","cfaSignInPhoneOnCodeReceived","cfaSignInPhoneOnCodeSent","cfaSignInTwitter","cfaSignOut","mapUserCredentialToUserInfo","mapUserToUserInfo","__toCommonJS","init_definitions","import_app","import_auth","import_core","import_rxjs","CapacitorFirebaseAuth","m","plugin","cfaLink","providerId","data","firebase","cfaLinkGoogle","cfaLinkTwitter","cfaLinkFacebook","cfaSignInAppleProvider","cfaLinkApple","cfaLinkPhone","observer","userCredential","reject","result","credential","authUser","idToken","rawNonce","provider","phone","verificationCode","cfaSignIn","cfaSignInGoogle","cfaSignInTwitter","cfaSignInFacebook","cfaSignInApple","cfaSignInPhone","cfaSignInPhoneOnCodeSent","event","cfaSignInPhoneOnCodeReceived","cfaSignOut","import_rxjs","import_operators","mapUserToUserInfo","user","uid","providerId","displayName","photoURL","phoneNumber","email","mapUserCredentialToUserInfo","userCredential"]}