{"version":3,"sources":["../src/web.ts","../src/providers/apple.provider.ts","../src/providers/facebook.provider.ts","../src/providers/google.provider.ts","../src/providers/phone.provider.ts","../src/providers/twitter.provider.ts"],"sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport { WebPlugin } from '@capacitor/core';\n\nimport {\n  CapacitorFirebaseAuthPlugin,\n  SignInOptions,\n  SignInResult,\n} from './definitions';\nimport { appleSignInWeb, appleLinkWeb } from './providers/apple.provider';\nimport {\n  facebookSignInWeb,\n  facebookLinkWeb,\n} from './providers/facebook.provider';\nimport { googleSignInWeb, googleLinkWeb } from './providers/google.provider';\nimport { phoneSignInWeb, phoneLinkWeb } from './providers/phone.provider';\nimport { twitterSignInWeb, twitterLinkWeb } from './providers/twitter.provider';\n\nconst appleProviderId = 'apple.com';\n\nexport class CapacitorFirebaseAuthWeb\n  extends WebPlugin\n  implements CapacitorFirebaseAuthPlugin\n{\n  constructor() {\n    super();\n  }\n\n  async signIn<T extends SignInResult>(options: {\n    providerId: string;\n    data?: SignInOptions;\n  }): Promise<T> {\n    switch (options.providerId) {\n      case appleProviderId:\n        return appleSignInWeb(options) as any;\n      case firebase.auth.GoogleAuthProvider.PROVIDER_ID:\n        return googleSignInWeb(options) as any;\n      case firebase.auth.TwitterAuthProvider.PROVIDER_ID:\n        return twitterSignInWeb(options) as any;\n      case firebase.auth.FacebookAuthProvider.PROVIDER_ID:\n        return facebookSignInWeb(options) as any;\n      case firebase.auth.PhoneAuthProvider.PROVIDER_ID:\n        return phoneSignInWeb(options) as any;\n    }\n\n    return Promise.reject(\n      `The '${options.providerId}' provider was not supported`\n    );\n  }\n\n  async link<T extends SignInResult>(options: {\n    providerId: string;\n    data?: SignInOptions;\n  }): Promise<T> {\n    switch (options.providerId) {\n      case appleProviderId:\n        return appleLinkWeb(options) as any;\n      case firebase.auth.GoogleAuthProvider.PROVIDER_ID:\n        return googleLinkWeb(options) as any;\n      case firebase.auth.TwitterAuthProvider.PROVIDER_ID:\n        return twitterLinkWeb(options) as any;\n      case firebase.auth.FacebookAuthProvider.PROVIDER_ID:\n        return facebookLinkWeb(options) as any;\n      case firebase.auth.PhoneAuthProvider.PROVIDER_ID:\n        return phoneLinkWeb(options) as any;\n    }\n\n    return Promise.reject(\n      `The '${options.providerId}' provider was not supported`\n    );\n  }\n\n  async signOut(_options: {}): Promise<void> {\n    return firebase.auth().signOut();\n  }\n}\n","import firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport { AppleSignInResult, SignInOptions } from '../definitions';\n\nexport const appleSignInWeb: (options: {\n  providerId: string;\n  data?: SignInOptions;\n}) => Promise<AppleSignInResult> = async () => {\n  const provider = new firebase.auth.OAuthProvider('apple.com');\n  firebase.auth().useDeviceLanguage();\n  const userCredential = await firebase.auth().signInWithPopup(provider);\n  const credential =\n    userCredential?.credential as firebase.auth.OAuthCredential;\n  return new AppleSignInResult(\n    credential.idToken as string,\n    '',\n    credential.accessToken as string,\n    credential.secret ?? ''\n  );\n};\n\nexport const appleLinkWeb: (options: {\n  providerId: string;\n  data?: SignInOptions;\n}) => Promise<firebase.auth.UserCredential> = async () => {\n  const provider = new firebase.auth.FacebookAuthProvider();\n  firebase.auth().useDeviceLanguage();\n\n  if (!firebase.auth().currentUser) {\n    throw new Error('No user to link to');\n  }\n  return await firebase.auth().currentUser.linkWithPopup(provider);\n};\n","import firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport { FacebookSignInResult, SignInOptions } from '../definitions';\n\nexport const facebookSignInWeb: (options: {\n  providerId: string;\n  data?: SignInOptions;\n}) => Promise<FacebookSignInResult> = async () => {\n  const provider = new firebase.auth.FacebookAuthProvider();\n  firebase.auth().useDeviceLanguage();\n  const userCredential = await firebase.auth().signInWithPopup(provider);\n  const credential =\n    userCredential?.credential as firebase.auth.OAuthCredential;\n  return new FacebookSignInResult(credential?.accessToken as string);\n};\n\nexport const facebookLinkWeb: (options: {\n  providerId: string;\n  data?: SignInOptions;\n}) => Promise<firebase.auth.UserCredential> = async () => {\n  const provider = new firebase.auth.FacebookAuthProvider();\n  firebase.auth().useDeviceLanguage();\n\n  if (!firebase.auth().currentUser) {\n    throw new Error('No user to link to');\n  }\n  return await firebase.auth().currentUser.linkWithPopup(provider);\n};\n","import firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport { GoogleSignInResult, SignInOptions } from '../definitions';\n\nexport const googleSignInWeb: (options: {\n  providerId: string;\n  data?: SignInOptions;\n}) => Promise<GoogleSignInResult> = async () => {\n  const provider = new firebase.auth.GoogleAuthProvider();\n  firebase.auth().useDeviceLanguage();\n  const userCredential = await firebase.auth().signInWithPopup(provider);\n  const credential =\n    userCredential?.credential as firebase.auth.OAuthCredential;\n  return new GoogleSignInResult(credential.idToken as string);\n};\n\nexport const googleLinkWeb: (options: {\n  providerId: string;\n  data?: SignInOptions;\n}) => Promise<firebase.auth.UserCredential> = async () => {\n  const provider = new firebase.auth.GoogleAuthProvider();\n  firebase.auth().useDeviceLanguage();\n\n  if (!firebase.auth().currentUser) {\n    throw new Error('No user to link to');\n  }\n  return await firebase.auth().currentUser.linkWithPopup(provider);\n};\n","import firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport { PhoneSignInResult, SignInOptions } from '../definitions';\n\nexport const phoneSignInWeb: (options: {\n  providerId: string;\n  data?: SignInOptions;\n}) => Promise<PhoneSignInResult> = async (options) => {\n  firebase.auth().useDeviceLanguage();\n  const code = options.data?.verificationCode as string;\n  const verifier = new firebase.auth.RecaptchaVerifier(options.data?.container);\n  const userCredential = await firebase\n    .auth()\n    .signInWithPhoneNumber(options.data?.phone as string, verifier);\n  const confirmation = await userCredential.confirm(code);\n  const idToken = await confirmation.user?.getIdToken();\n  return new PhoneSignInResult(idToken as string, code);\n};\n\nexport const phoneLinkWeb: (options: {\n  providerId: string;\n  data?: SignInOptions;\n}) => Promise<firebase.auth.UserCredential> = async () => {\n  // const provider = new firebase.auth.PhoneAuthProvider();\n  return Promise.reject(`The phone provider was not implemented for web yet`);\n};\n","import firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport { SignInOptions, TwitterSignInResult } from '../definitions';\n\nimport OAuthCredential = firebase.auth.OAuthCredential;\n\nexport const twitterSignInWeb: (options: {\n  providerId: string;\n  data?: SignInOptions;\n}) => Promise<TwitterSignInResult> = async () => {\n  const provider = new firebase.auth.TwitterAuthProvider();\n  firebase.auth().useDeviceLanguage();\n  const userCredential = await firebase.auth().signInWithPopup(provider);\n  const credential = userCredential?.credential as OAuthCredential;\n  return new TwitterSignInResult(\n    credential.accessToken as string,\n    credential.secret as string\n  );\n};\n\nexport const twitterLinkWeb: (options: {\n  providerId: string;\n  data?: SignInOptions;\n}) => Promise<firebase.auth.UserCredential> = async () => {\n  const provider = new firebase.auth.TwitterAuthProvider();\n  firebase.auth().useDeviceLanguage();\n\n  if (!firebase.auth().currentUser) {\n    throw new Error('No user to link to');\n  }\n  return await firebase.auth().currentUser.linkWithPopup(provider);\n};\n"],"mappings":"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","names":["firebase","WebPlugin","firebase","appleSignInWeb","provider","firebase","credential","AppleSignInResult","appleLinkWeb","firebase","facebookSignInWeb","provider","firebase","credential","FacebookSignInResult","facebookLinkWeb","firebase","googleSignInWeb","provider","firebase","credential","GoogleSignInResult","googleLinkWeb","firebase","phoneSignInWeb","options","firebase","code","verifier","idToken","PhoneSignInResult","phoneLinkWeb","firebase","twitterSignInWeb","provider","firebase","credential","TwitterSignInResult","twitterLinkWeb","appleProviderId","CapacitorFirebaseAuthWeb","WebPlugin","options","appleSignInWeb","firebase","googleSignInWeb","twitterSignInWeb","facebookSignInWeb","phoneSignInWeb","appleLinkWeb","googleLinkWeb","twitterLinkWeb","facebookLinkWeb","phoneLinkWeb","_options"]}