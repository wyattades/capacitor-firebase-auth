{"version":3,"sources":["../src/facades.ts","../src/operators.ts"],"sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport { registerPlugin, Capacitor } from '@capacitor/core';\nimport { Observable, throwError } from 'rxjs';\n\nimport {\n  AppleSignInResult,\n  CapacitorFirebaseAuthPlugin,\n  FacebookSignInResult,\n  GoogleSignInResult,\n  PhoneSignInResult,\n  TwitterSignInResult,\n  SignInResult,\n  SignInOptions,\n} from './definitions';\n\nexport const CapacitorFirebaseAuth =\n  registerPlugin<CapacitorFirebaseAuthPlugin>('CapacitorFirebaseAuth', {\n    web: () => import('./web').then((m) => new m.CapacitorFirebaseAuthWeb()),\n  });\nconst plugin = CapacitorFirebaseAuth;\n\nexport const cfaLink = (\n  providerId: string,\n  data?: SignInOptions\n): Observable<{\n  userCredential: firebase.auth.UserCredential;\n  result?: SignInResult;\n}> => {\n  switch (providerId) {\n    case firebase.auth.GoogleAuthProvider.PROVIDER_ID:\n      return cfaLinkGoogle();\n    case firebase.auth.TwitterAuthProvider.PROVIDER_ID:\n      return cfaLinkTwitter();\n    case firebase.auth.FacebookAuthProvider.PROVIDER_ID:\n      return cfaLinkFacebook();\n    case cfaSignInAppleProvider:\n      return cfaLinkApple();\n    case firebase.auth.PhoneAuthProvider.PROVIDER_ID:\n      if (!data) {\n        return throwError(\n          new Error('Phone and Verification data must be provided.')\n        );\n      }\n      return cfaLinkPhone(data.phone, data.verificationCode);\n    default:\n      return throwError(\n        new Error(`The '${providerId}' provider was not supported`)\n      );\n  }\n};\n\n/**\n * Call the Google link method on native layer and links user on web layer with retrieved credentials.\n */\nexport const cfaLinkGoogle = (): Observable<{\n  userCredential: firebase.auth.UserCredential;\n  result?: GoogleSignInResult;\n}> => {\n  return new Observable((observer) => {\n    // get the provider id\n    const providerId = firebase.auth.GoogleAuthProvider.PROVIDER_ID;\n\n    // Special handling on the web as we cannot link the auth provider twice\n    if (Capacitor.getPlatform() === 'web') {\n      plugin\n        .link<firebase.auth.UserCredential>({ providerId })\n        .then((userCredential) => {\n          observer.next({ userCredential });\n          observer.complete();\n        })\n        .catch((reject) => {\n          observer.error(reject);\n        });\n      return;\n    }\n\n    // native link\n    plugin\n      .link<GoogleSignInResult>({ providerId })\n      .then((result) => {\n        // create the credentials\n        const credential = firebase.auth.GoogleAuthProvider.credential(\n          result.idToken\n        );\n\n        // web link\n        const authUser = firebase.app().auth().currentUser;\n        if (!authUser) {\n          return observer.error(new Error('No user to link to'));\n        }\n\n        authUser\n          .linkWithCredential(credential)\n          .then((userCredential) => {\n            observer.next({ userCredential, result });\n            observer.complete();\n          })\n          .catch((reject: any) => {\n            observer.error(reject);\n          });\n      })\n      .catch((reject) => {\n        observer.error(reject);\n      });\n  });\n};\n\n/**\n * Call the Twitter link method on native and link on web layer with retrieved credentials.\n */\nexport const cfaLinkTwitter = (): Observable<{\n  userCredential: firebase.auth.UserCredential;\n  result?: TwitterSignInResult;\n}> => {\n  return new Observable((observer) => {\n    // get the provider id\n    const providerId = firebase.auth.TwitterAuthProvider.PROVIDER_ID;\n\n    // Special handling on the web as we cannot link the auth provider twice\n    if (Capacitor.getPlatform() === 'web') {\n      plugin\n        .link<firebase.auth.UserCredential>({ providerId })\n        .then((userCredential) => {\n          observer.next({ userCredential });\n          observer.complete();\n        })\n        .catch((reject) => {\n          observer.error(reject);\n        });\n      return;\n    }\n\n    // native link\n    plugin\n      .link<TwitterSignInResult>({ providerId })\n      .then((result) => {\n        // create the credentials\n        const credential = firebase.auth.TwitterAuthProvider.credential(\n          result.idToken,\n          result.secret\n        );\n\n        // web link\n        const authUser = firebase.app().auth().currentUser;\n        if (!authUser) {\n          return observer.error(new Error('No user to link to'));\n        }\n\n        authUser\n          .linkWithCredential(credential)\n          .then((userCredential) => {\n            observer.next({ userCredential, result });\n            observer.complete();\n          })\n          .catch((reject: any) => observer.error(reject));\n      })\n      .catch((reject) => observer.error(reject));\n  });\n};\n\n/**\n * Call the Facebook link method on native and link on web layer with retrieved credentials.\n */\nexport const cfaLinkFacebook = (): Observable<{\n  userCredential: firebase.auth.UserCredential;\n  result?: FacebookSignInResult;\n}> => {\n  return new Observable((observer) => {\n    // get the provider id\n    const providerId = firebase.auth.FacebookAuthProvider.PROVIDER_ID;\n\n    // Special handling on the web as we cannot link the auth provider twice\n    if (Capacitor.getPlatform() === 'web') {\n      plugin\n        .link<firebase.auth.UserCredential>({ providerId })\n        .then((userCredential) => {\n          observer.next({ userCredential });\n          observer.complete();\n        })\n        .catch((reject) => {\n          observer.error(reject);\n        });\n      return;\n    }\n\n    // native link\n    plugin\n      .link<FacebookSignInResult>({ providerId })\n      .then((result) => {\n        // create the credentials\n        const credential = firebase.auth.FacebookAuthProvider.credential(\n          result.idToken\n        );\n\n        // web link\n        const authUser = firebase.app().auth().currentUser;\n        if (!authUser) {\n          return observer.error(new Error('No user to link to'));\n        }\n\n        authUser\n          .linkWithCredential(credential)\n          .then((userCredential) => {\n            observer.next({ userCredential, result });\n            observer.complete();\n          })\n          .catch((reject: any) => observer.error(reject));\n      })\n      .catch((reject) => observer.error(reject));\n  });\n};\n\n/**\n * Call the Apple link method on native and link on web layer with retrieved credentials.\n */\nexport const cfaLinkApple = (): Observable<{\n  userCredential: firebase.auth.UserCredential;\n  result?: AppleSignInResult;\n}> => {\n  return new Observable((observer) => {\n    // Special handling on the web as we cannot link the auth provider twice\n    if (Capacitor.getPlatform() === 'web') {\n      plugin\n        .link<firebase.auth.UserCredential>({\n          providerId: cfaSignInAppleProvider,\n        })\n        .then((userCredential) => {\n          observer.next({ userCredential });\n          observer.complete();\n        })\n        .catch((reject) => {\n          observer.error(reject);\n        });\n      return;\n    }\n\n    // native link\n    plugin\n      .link<AppleSignInResult>({ providerId: cfaSignInAppleProvider })\n      .then((result) => {\n        const { idToken, rawNonce } = result;\n\n        const provider = new firebase.auth.OAuthProvider('apple.com');\n        provider.addScope('email');\n        provider.addScope('name');\n\n        const credential = provider.credential({ idToken, rawNonce });\n\n        // web link\n        const authUser = firebase.app().auth().currentUser;\n        if (!authUser) {\n          return observer.error(new Error('No user to link to'));\n        }\n\n        authUser\n          .linkWithCredential(credential)\n          .then((userCredential) => {\n            observer.next({ userCredential, result });\n            observer.complete();\n          })\n          .catch((reject: any) => observer.error(reject));\n      })\n      .catch((reject) => observer.error(reject));\n  });\n};\n\n/**\n * Call the Phone verification link, handling send and retrieve to code on native, but only link on web with retrieved credentials.\n * @param phone The user phone number.\n * @param verificationCode The verification code sent by SMS (optional).\n */\nexport const cfaLinkPhone = (\n  phone: string,\n  verificationCode?: string\n): Observable<{\n  userCredential: firebase.auth.UserCredential;\n  result?: PhoneSignInResult;\n}> => {\n  return new Observable((observer) => {\n    // get the provider id\n    const providerId = firebase.auth.PhoneAuthProvider.PROVIDER_ID;\n\n    // Special handling on the web as we cannot link the auth provider twice\n    if (Capacitor.getPlatform() === 'web') {\n      plugin\n        .link<firebase.auth.UserCredential>({ providerId })\n        .then((userCredential) => {\n          observer.next({ userCredential });\n          observer.complete();\n        })\n        .catch((reject) => {\n          observer.error(reject);\n        });\n      return;\n    }\n\n    plugin\n      .link<PhoneSignInResult>({\n        providerId,\n        data: { phone, verificationCode },\n      })\n      .then((result) => {\n        // if there is no verification code\n        if (!result.verificationCode) {\n          return observer.complete();\n        }\n\n        // create the credentials\n        const credential = firebase.auth.PhoneAuthProvider.credential(\n          result.verificationId,\n          result.verificationCode\n        );\n\n        // web link\n        const authUser = firebase.app().auth().currentUser;\n        if (!authUser) {\n          return observer.error(new Error('No user to link to'));\n        }\n\n        authUser\n          .linkWithCredential(credential)\n          .then((userCredential) => {\n            observer.next({ userCredential, result });\n            observer.complete();\n          })\n          .catch((reject: any) => observer.error(reject));\n      })\n      .catch((reject) => observer.error(reject));\n  });\n};\n\n/**\n * Call the sign in method on native layer and sign in on web layer with retrieved credentials.\n * @param providerId The provider identification.\n * @param data The provider additional information (optional).\n */\nexport const cfaSignIn = (\n  providerId: string,\n  data?: SignInOptions\n): Observable<{\n  userCredential: firebase.auth.UserCredential;\n  result: SignInResult;\n}> => {\n  switch (providerId) {\n    case firebase.auth.GoogleAuthProvider.PROVIDER_ID:\n      return cfaSignInGoogle();\n    case firebase.auth.TwitterAuthProvider.PROVIDER_ID:\n      return cfaSignInTwitter();\n    case firebase.auth.FacebookAuthProvider.PROVIDER_ID:\n      return cfaSignInFacebook();\n    case cfaSignInAppleProvider:\n      return cfaSignInApple();\n    case firebase.auth.PhoneAuthProvider.PROVIDER_ID:\n      if (!data) {\n        return throwError(\n          new Error('Phone and Verification data must be provided.')\n        );\n      }\n      return cfaSignInPhone(data.phone, data.verificationCode);\n    default:\n      return throwError(\n        new Error(`The '${providerId}' provider was not supported`)\n      );\n  }\n};\n\n/**\n * Call the Google sign in method on native layer and sign in on web layer with retrieved credentials.\n */\nexport const cfaSignInGoogle = (): Observable<{\n  userCredential: firebase.auth.UserCredential;\n  result: GoogleSignInResult;\n}> => {\n  return new Observable((observer) => {\n    // get the provider id\n    const providerId = firebase.auth.GoogleAuthProvider.PROVIDER_ID;\n\n    // native sign in\n    plugin\n      .signIn<GoogleSignInResult>({ providerId })\n      .then((result: GoogleSignInResult) => {\n        // create the credentials\n        const credential = firebase.auth.GoogleAuthProvider.credential(\n          result.idToken\n        );\n\n        // web sign in\n        firebase\n          .app()\n          .auth()\n          .signInWithCredential(credential)\n          .then((userCredential) => {\n            observer.next({ userCredential, result });\n            observer.complete();\n          })\n          .catch((reject: any) => {\n            observer.error(reject);\n          });\n      })\n      .catch((reject: any) => {\n        observer.error(reject);\n      });\n  });\n};\n\n/**\n * Call the Twitter sign in method on native and sign in on web layer with retrieved credentials.\n */\nexport const cfaSignInTwitter = (): Observable<{\n  userCredential: firebase.auth.UserCredential;\n  result: TwitterSignInResult;\n}> => {\n  return new Observable((observer) => {\n    // get the provider id\n    const providerId = firebase.auth.TwitterAuthProvider.PROVIDER_ID;\n\n    // native sign in\n    plugin\n      .signIn<TwitterSignInResult>({ providerId })\n      .then((result) => {\n        // create the credentials\n        const credential = firebase.auth.TwitterAuthProvider.credential(\n          result.idToken,\n          result.secret\n        );\n\n        // web sign in\n        firebase\n          .app()\n          .auth()\n          .signInWithCredential(credential)\n          .then((userCredential) => {\n            observer.next({ userCredential, result });\n            observer.complete();\n          })\n          .catch((reject: any) => observer.error(reject));\n      })\n      .catch((reject: any) => observer.error(reject));\n  });\n};\n\n/**\n * Call the Facebook sign in method on native and sign in on web layer with retrieved credentials.\n */\nexport const cfaSignInFacebook = (): Observable<{\n  userCredential: firebase.auth.UserCredential;\n  result: FacebookSignInResult;\n}> => {\n  return new Observable((observer) => {\n    // get the provider id\n    const providerId = firebase.auth.FacebookAuthProvider.PROVIDER_ID;\n\n    // native sign in\n    plugin\n      .signIn<FacebookSignInResult>({ providerId })\n      .then((result) => {\n        // create the credentials\n        const credential = firebase.auth.FacebookAuthProvider.credential(\n          result.idToken\n        );\n\n        // TODO: add scopes here?\n        // const provider = new firebase.auth.OAuthProvider('facebook.com');\n        // provider.addScope('email');\n        // const credential = provider.credential({  idToken: result.idToken });\n\n        // web sign in\n        firebase\n          .app()\n          .auth()\n          .signInWithCredential(credential)\n          .then((userCredential) => {\n            observer.next({ userCredential, result });\n            observer.complete();\n          })\n          .catch((reject: any) => observer.error(reject));\n      })\n      .catch((reject: any) => observer.error(reject));\n  });\n};\n\nexport const cfaSignInAppleProvider = 'apple.com';\n\n/**\n * Call the Apple sign in method on native and sign in on web layer with retrieved credentials.\n */\nexport const cfaSignInApple = (): Observable<{\n  userCredential: firebase.auth.UserCredential;\n  result: AppleSignInResult;\n}> => {\n  return new Observable((observer) => {\n    // native sign in\n    plugin\n      .signIn<AppleSignInResult>({ providerId: cfaSignInAppleProvider })\n      .then((result) => {\n        const { idToken, rawNonce } = result;\n\n        const provider = new firebase.auth.OAuthProvider('apple.com');\n        provider.addScope('email');\n        provider.addScope('name');\n\n        const credential = provider.credential({ idToken, rawNonce });\n\n        // web sign in\n        firebase\n          .app()\n          .auth()\n          .signInWithCredential(credential)\n          .then((userCredential) => {\n            observer.next({ userCredential, result });\n            observer.complete();\n          })\n          .catch((reject: any) => observer.error(reject));\n      })\n      .catch((reject: any) => observer.error(reject));\n  });\n};\n\n/**\n * Call the Phone verification sign in, handling send and retrieve to code on native, but only sign in on web with retrieved credentials.\n * @param phone The user phone number.\n * @param verificationCode The verification code sent by SMS (optional).\n */\nexport const cfaSignInPhone = (\n  phone: string,\n  verificationCode?: string\n): Observable<{\n  userCredential: firebase.auth.UserCredential;\n  result: PhoneSignInResult;\n}> => {\n  return new Observable((observer) => {\n    // get the provider id\n    const providerId = firebase.auth.PhoneAuthProvider.PROVIDER_ID;\n\n    plugin\n      .signIn<PhoneSignInResult>({\n        providerId,\n        data: { phone, verificationCode },\n      })\n      .then((result) => {\n        // if there is no verification code\n        if (!result.verificationCode) {\n          return observer.complete();\n        }\n\n        // create the credentials\n        const credential = firebase.auth.PhoneAuthProvider.credential(\n          result.verificationId,\n          result.verificationCode\n        );\n\n        // web sign in\n        firebase\n          .app()\n          .auth()\n          .signInWithCredential(credential)\n          .then((userCredential) => {\n            observer.next({ userCredential, result });\n            observer.complete();\n          })\n          .catch((reject: any) => observer.error(reject));\n      })\n      .catch((reject: any) => observer.error(reject));\n  });\n};\n\n/**\n * Observable of one notification of <code>On Code Sent</code>event from Phone Verification process.\n */\nexport const cfaSignInPhoneOnCodeSent = (): Observable<string> => {\n  return new Observable<string>((observer) => {\n    // @ts-ignore\n    return plugin.addListener(\n      'cfaSignInPhoneOnCodeSent',\n      (event: { verificationId: string }) => {\n        observer.next(event.verificationId);\n        observer.complete();\n      }\n    );\n  });\n};\n\n/**\n * Observable of one notification of <code>On Code Received</code> event from Phone Verification process.\n */\nexport const cfaSignInPhoneOnCodeReceived = (): Observable<{\n  verificationId: string;\n  verificationCode: string;\n}> => {\n  return new Observable<{ verificationId: string; verificationCode: string }>(\n    (observer) => {\n      // @ts-ignore\n      return plugin.addListener(\n        'cfaSignInPhoneOnCodeReceived',\n        (event: { verificationId: string; verificationCode: string }) => {\n          observer.next(event);\n          observer.complete();\n        }\n      );\n    }\n  );\n};\n\n/**\n * Call Google sign out method on native and web layers.\n */\nexport const cfaSignOut = (): Observable<void> => {\n  return new Observable((observer) => {\n    plugin.signOut({}).then(() => {\n      // web sign out\n      firebase\n        .app()\n        .auth()\n        .signOut()\n        .then(() => {\n          observer.next();\n          observer.complete();\n        })\n        .catch((reject: any) => observer.error(reject));\n    });\n  });\n};\n","import firebase from 'firebase/app';\nimport { Observable, pipe, UnaryFunction } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * Operator to map firebase.User to firebase.UserInfo.\n *\n * Sample of use:\n *\n * ```ts\n * import {cfaSignIn, mapUserToUserInfo} from 'capacitor-firebase-auth';\n * import {UserInfo} from 'firebase/app';\n *\n * cfaSignIn('google.com').pipe(\n *     mapUserToUserInfo(),\n * ).subscribe(\n *     (user: UserInfo) => console.log(user.displayName);\n * )\n * ```\n */\nexport const mapUserToUserInfo = (): UnaryFunction<\n  Observable<firebase.User>,\n  Observable<firebase.UserInfo>\n> =>\n  pipe(\n    map((user: firebase.User) => {\n      if (user) {\n        const { uid, providerId, displayName, photoURL, phoneNumber, email } =\n          user;\n        return { uid, providerId, displayName, photoURL, phoneNumber, email };\n      }\n      return user;\n    })\n  );\n\n/**\n * Operator to map firebase.auth.UserCredential to firebase.UserInfo.\n *\n * For use with alternative facade only.\n *\n * Sample of use:\n *\n * ```ts\n * import {cfaSignIn, mapUserToUserInfo} from 'capacitor-firebase-auth/alternative';\n * import {UserInfo} from 'firebase/app';\n *\n * cfaSignIn('google.com').pipe(\n *     mapUserToUserInfo(),\n * ).subscribe(\n *     (user: UserInfo) => console.log(user.displayName);\n * )\n * ```\n */\nexport const mapUserCredentialToUserInfo = (): UnaryFunction<\n  Observable<{ userCredential: firebase.auth.UserCredential }>,\n  Observable<firebase.UserInfo | null>\n> =>\n  pipe(\n    map(\n      ({\n        userCredential,\n      }: {\n        userCredential: firebase.auth.UserCredential;\n      }) => {\n        if (userCredential?.user) {\n          const { uid, providerId, displayName, photoURL, phoneNumber, email } =\n            userCredential.user;\n          return { uid, providerId, displayName, photoURL, phoneNumber, email };\n        }\n        return null;\n      }\n    )\n  );\n"],"mappings":"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","names":["firebase","registerPlugin","Capacitor","Observable","throwError","CapacitorFirebaseAuth","m","plugin","cfaLink","providerId","data","cfaLinkGoogle","cfaLinkTwitter","cfaLinkFacebook","cfaSignInAppleProvider","cfaLinkApple","cfaLinkPhone","observer","userCredential","reject","result","credential","authUser","idToken","rawNonce","provider","phone","verificationCode","cfaSignIn","cfaSignInGoogle","cfaSignInTwitter","cfaSignInFacebook","cfaSignInApple","cfaSignInPhone","cfaSignInPhoneOnCodeSent","event","cfaSignInPhoneOnCodeReceived","cfaSignOut","pipe","map","mapUserToUserInfo","user","uid","providerId","displayName","photoURL","phoneNumber","email","mapUserCredentialToUserInfo","userCredential"]}