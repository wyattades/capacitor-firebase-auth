{"version":3,"sources":["../src/index.ts","../src/facades.ts"],"sourcesContent":["export * from './definitions';\nexport * from './facades';\n","import { registerPlugin } from '@capacitor/core';\nimport {\n  Auth,\n  AuthCredential,\n  FacebookAuthProvider,\n  GoogleAuthProvider,\n  OAuthProvider,\n  PhoneAuthProvider,\n  TwitterAuthProvider,\n  getAuth,\n  linkWithCredential,\n  signInWithCredential,\n} from 'firebase/auth';\n\nimport type {\n  AppleSignInResult,\n  CapacitorFirebaseAuthPlugin,\n  FacebookSignInResult,\n  GoogleSignInResult,\n  PhoneSignInResult,\n  SignInOptionsMap,\n  TwitterSignInResult,\n} from './definitions';\n\nexport const CapacitorFirebaseAuth =\n  registerPlugin<CapacitorFirebaseAuthPlugin>('CapacitorFirebaseAuth', {\n    web: async () => ({\n      signIn: async () => {\n        throw new Error('web not implemented');\n      },\n      link: async () => {\n        throw new Error('web not implemented');\n      },\n      signOut: async () => {\n        throw new Error('web not implemented');\n      },\n    }),\n  });\nconst plugin = CapacitorFirebaseAuth;\n\nabstract class BaseProvider {\n  public static PROVIDER_ID: string;\n  constructor(_auth?: Auth) {}\n}\n\ntype MaybePromise<T> = T | Promise<T>;\n\nclass AppleAuthProvider extends OAuthProvider {\n  public static PROVIDER_ID = 'apple.com';\n  constructor() {\n    super(AppleAuthProvider.PROVIDER_ID);\n  }\n}\n\nconst registerProvider = <Prov extends typeof BaseProvider, SignInResult>(\n  Provider: Prov,\n  buildCredential: (\n    signInResult: SignInResult,\n    Provider: Prov\n  ) => MaybePromise<AuthCredential | null>\n) => {\n  return {\n    providerId: Provider.PROVIDER_ID,\n    Provider,\n    buildCredential,\n  };\n};\n\nconst PROVIDER_MAP = {\n  ['google.com']: registerProvider(\n    GoogleAuthProvider,\n    ({ idToken }: GoogleSignInResult, Provider) => Provider.credential(idToken)\n  ),\n  ['apple.com']: registerProvider(\n    AppleAuthProvider,\n    ({ idToken, rawNonce }: AppleSignInResult, Provider) => {\n      const provider = new Provider();\n\n      provider.addScope('email');\n      provider.addScope('name');\n      return provider.credential({ idToken, rawNonce });\n    }\n  ),\n  ['facebook.com']: registerProvider(\n    FacebookAuthProvider,\n    ({ idToken }: FacebookSignInResult, Provider) =>\n      Provider.credential(idToken)\n  ),\n  ['twitter.com']: registerProvider(\n    TwitterAuthProvider,\n    ({ idToken, secret }: TwitterSignInResult, Provider) =>\n      Provider.credential(idToken, secret)\n  ),\n  phone: registerProvider(\n    PhoneAuthProvider,\n    ({ verificationId, verificationCode }: PhoneSignInResult, Provider) =>\n      verificationCode\n        ? Provider.credential(verificationId, verificationCode)\n        : null\n  ),\n};\n\ntype SignInResultMap = {\n  [K in keyof typeof PROVIDER_MAP]: Parameters<\n    typeof PROVIDER_MAP[K]['buildCredential']\n  >[0];\n};\n\n/**\n * Call the sign in method on native layer and sign in on web layer with retrieved credentials.\n */\nexport const signIn = async <ProviderId extends keyof typeof PROVIDER_MAP>(\n  /** The provider ID or name. */\n  providerId: ProviderId,\n  /** Additional information for provider */\n  ...[data]: SignInOptionsMap[ProviderId] extends never\n    ? []\n    : [data: SignInOptionsMap[ProviderId]]\n) => {\n  const config = PROVIDER_MAP[providerId];\n  if (!config) throw new Error(`Provider ${providerId} not found`);\n\n  const { Provider, buildCredential } = config;\n\n  const signInResult = await plugin.signIn<SignInResultMap[ProviderId]>({\n    providerId,\n    data,\n  });\n\n  const oauthCred = await buildCredential(signInResult as any, Provider as any);\n  if (!oauthCred) return null; // abort if no credential\n\n  const userCredential = await signInWithCredential(getAuth(), oauthCred);\n\n  return { userCredential, result: signInResult };\n};\n\n/**\n * Call the link method on native layer and link on web layer with retrieved credentials.\n */\nexport const link = async <ProviderId extends keyof typeof PROVIDER_MAP>(\n  /** The provider ID or name. */\n  providerId: ProviderId,\n  /** Additional information for provider */\n  ...[data]: SignInOptionsMap[ProviderId] extends never\n    ? []\n    : [data: SignInOptionsMap[ProviderId]]\n) => {\n  const config = PROVIDER_MAP[providerId];\n  if (!config) throw new Error(`Provider ${providerId} not found`);\n\n  const { Provider, buildCredential } = config;\n\n  const result = await plugin.link<SignInResultMap[ProviderId]>({\n    providerId,\n    data,\n  });\n\n  const oauthCred = await buildCredential(result as any, Provider as any);\n  if (!oauthCred) return null; // abort if no credential\n\n  // web link\n  const authUser = getAuth().currentUser;\n  if (!authUser) {\n    throw new Error('No user to link to');\n  }\n\n  const userCredential = await linkWithCredential(authUser, oauthCred);\n\n  return { userCredential, result };\n};\n\n/**\n * Call sign out method on native and web layers.\n */\nexport const signOut = async () => {\n  // native sign out\n  await plugin.signOut({});\n\n  // web sign out\n  await getAuth().signOut();\n};\n"],"mappings":"qjBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,2BAAAE,EAAA,SAAAC,EAAA,WAAAC,EAAA,YAAAC,IAAA,eAAAC,EAAAN,GCAA,IAAAO,EAA+B,2BAC/BC,EAWO,yBAYA,IAAMC,KACX,kBAA4C,wBAAyB,CACnE,IAAK,UAAa,CAChB,OAAQ,SAAY,CAClB,MAAM,IAAI,MAAM,qBAAqB,CACvC,EACA,KAAM,SAAY,CAChB,MAAM,IAAI,MAAM,qBAAqB,CACvC,EACA,QAAS,SAAY,CACnB,MAAM,IAAI,MAAM,qBAAqB,CACvC,CACF,EACF,CAAC,EACGC,EAASD,EASf,IAAME,EAAN,cAAgC,eAAc,CAE5C,aAAc,CACZ,MAAMA,EAAkB,WAAW,CACrC,CACF,EALMC,EAAND,EACEE,EADID,EACU,cAAc,aAM9B,IAAME,EAAmB,CACvBC,EACAC,KAKO,CACL,WAAYD,EAAS,YACrB,SAAAA,EACA,gBAAAC,CACF,GAGIC,EAAe,CACnB,CAAC,cAAeH,EACd,qBACA,CAAC,CAAE,QAAAI,CAAQ,EAAuBH,IAAaA,EAAS,WAAWG,CAAO,CAC5E,EACA,CAAC,aAAcJ,EACbF,EACA,CAAC,CAAE,QAAAM,EAAS,SAAAC,CAAS,EAAsBJ,IAAa,CACtD,IAAMK,EAAW,IAAIL,EAErB,OAAAK,EAAS,SAAS,OAAO,EACzBA,EAAS,SAAS,MAAM,EACjBA,EAAS,WAAW,CAAE,QAAAF,EAAS,SAAAC,CAAS,CAAC,CAClD,CACF,EACA,CAAC,gBAAiBL,EAChB,uBACA,CAAC,CAAE,QAAAI,CAAQ,EAAyBH,IAClCA,EAAS,WAAWG,CAAO,CAC/B,EACA,CAAC,eAAgBJ,EACf,sBACA,CAAC,CAAE,QAAAI,EAAS,OAAAG,CAAO,EAAwBN,IACzCA,EAAS,WAAWG,EAASG,CAAM,CACvC,EACA,MAAOP,EACL,oBACA,CAAC,CAAE,eAAAQ,EAAgB,iBAAAC,CAAiB,EAAsBR,IACxDQ,EACIR,EAAS,WAAWO,EAAgBC,CAAgB,EACpD,IACR,CACF,EAWaC,EAAS,MAEpBC,KAEG,CAACC,CAAI,IAGL,CACH,IAAMC,EAASV,EAAaQ,GAC5B,GAAI,CAACE,EAAQ,MAAM,IAAI,MAAM,YAAYF,aAAsB,EAE/D,GAAM,CAAE,SAAAV,EAAU,gBAAAC,CAAgB,EAAIW,EAEhCC,EAAe,MAAMC,EAAO,OAAoC,CACpE,WAAAJ,EACA,KAAAC,CACF,CAAC,EAEKI,EAAY,MAAMd,EAAgBY,EAAqBb,CAAe,EAC5E,OAAKe,EAIE,CAAE,eAFc,QAAM,2BAAqB,WAAQ,EAAGA,CAAS,EAE7C,OAAQF,CAAa,EAJvB,IAKzB,EAKaG,EAAO,MAElBN,KAEG,CAACC,CAAI,IAGL,CACH,IAAMC,EAASV,EAAaQ,GAC5B,GAAI,CAACE,EAAQ,MAAM,IAAI,MAAM,YAAYF,aAAsB,EAE/D,GAAM,CAAE,SAAAV,EAAU,gBAAAC,CAAgB,EAAIW,EAEhCK,EAAS,MAAMH,EAAO,KAAkC,CAC5D,WAAAJ,EACA,KAAAC,CACF,CAAC,EAEKI,EAAY,MAAMd,EAAgBgB,EAAejB,CAAe,EACtE,GAAI,CAACe,EAAW,OAAO,KAGvB,IAAMG,KAAW,WAAQ,EAAE,YAC3B,GAAI,CAACA,EACH,MAAM,IAAI,MAAM,oBAAoB,EAKtC,MAAO,CAAE,eAFc,QAAM,sBAAmBA,EAAUH,CAAS,EAE1C,OAAAE,CAAO,CAClC,EAKaE,EAAU,SAAY,CAEjC,MAAML,EAAO,QAAQ,CAAC,CAAC,EAGvB,QAAM,WAAQ,EAAE,QAAQ,CAC1B","names":["src_exports","__export","CapacitorFirebaseAuth","link","signIn","signOut","__toCommonJS","import_core","import_auth","CapacitorFirebaseAuth","plugin","_AppleAuthProvider","AppleAuthProvider","__publicField","registerProvider","Provider","buildCredential","PROVIDER_MAP","idToken","rawNonce","provider","secret","verificationId","verificationCode","signIn","providerId","data","config","signInResult","plugin","oauthCred","link","result","authUser","signOut"]}